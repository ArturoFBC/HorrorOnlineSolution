@model HorrorOnline.Core.DTO.StoryResponse

@*<div>
    <h4>StoryResponse</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StoryId)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StoryId)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Summary)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Summary)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Text)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Text)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DateUploaded)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateUploaded)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Author)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Author)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Reviews)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Reviews)
        </dd>
    </dl>
</div>
<div>
    @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    <a asp-action="Index">Back to List</a>
</div>*@
<div class="story-card flex flex-column gap-16">

	<a asp-controller="story" asp-action="details" asp-route-storyid="@Model.StoryId">
		<h1>
            @Html.DisplayFor(model => model.Title)
        </h1>
    </a>
    
	<div class="tag-list flex wrap align-items-center gap-16">

        @{
            Dictionary<Guid, string> tagDictionary = Model.TagIds.Zip(Model.TagNames, (k, v) => new { k, v }).ToDictionary(x => x.k, x => x.v);
        }

		<img class="icon" src="~/media/img/tags-regular-full.svg" />
        @foreach (KeyValuePair<Guid,string> tagPair in tagDictionary)
        {
            <a class="tag" asp-controller="tags" asp-action="tagbyid" asp-route-tagid="@tagPair.Key">
                @tagPair.Value
            </a>
        }
    </div>

	<div class="flex wrap align-items-center justify-space-between">

		<div class="flex align-items-center gap-8">
			<img class="icon" src="~/media/img/pen-nib-regular-full.svg" />
            <span>
                <b>@Html.DisplayFor(model => model.Author)</b>
            </span>
		</div>

		<div class="flex align-items-center gap-8">
			<img class="icon" src="~/media/img/calendar-solid.svg" />
            <span><b>@Html.DisplayFor(model => model.DateUploaded)</b></span>
		</div>

	</div>

    @if (ViewBag.DisplayMode == "full")
    {
        <div class="flex flex-column text-display">
            @Html.DisplayFor(model => model.Text)
        </div>
    }
    else
    {
        <div class="flex flex-column text-display summary">
            @Html.DisplayFor(model => model.Text)
        </div>
    }

</div>